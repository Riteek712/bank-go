// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package sqlc

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (
  owner, balance, currency, created_at
) VALUES (
  $1, $2, $3, $4
)
`

type CreateAccountParams struct {
	Owner     string
	Balance   int64
	Currency  string
	CreatedAt time.Time
}

// Create a new account
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount,
		arg.Owner,
		arg.Balance,
		arg.Currency,
		arg.CreatedAt,
	)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1
LIMIT 1
`

// Get account by ID
func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByOwner = `-- name: GetAccountByOwner :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE owner = $1
LIMIT 1
`

// Get account by owner
func (q *Queries) GetAccountByOwner(ctx context.Context, owner string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByOwner, owner)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts
SET balance = $1
WHERE id = $2
`

type UpdateAccountBalanceParams struct {
	Balance int64
	ID      int64
}

// Update account balance
func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountBalance, arg.Balance, arg.ID)
	return err
}
