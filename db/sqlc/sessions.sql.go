// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
  id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

type CreateSessionParams struct {
	ID           pgtype.UUID
	Username     string
	RefreshToken string
	UserAgent    string
	ClientIp     string
	IsBlocked    bool
	ExpiresAt    pgtype.Timestamptz
	CreatedAt    pgtype.Timestamptz
}

// Create a new session
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions
WHERE id = $1
LIMIT 1
`

// Get session by ID
func (q *Queries) GetSessionByID(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionBlocked = `-- name: UpdateSessionBlocked :exec
UPDATE sessions
SET is_blocked = $1
WHERE id = $2
`

type UpdateSessionBlockedParams struct {
	IsBlocked bool
	ID        pgtype.UUID
}

// Update session blocking status
func (q *Queries) UpdateSessionBlocked(ctx context.Context, arg UpdateSessionBlockedParams) error {
	_, err := q.db.Exec(ctx, updateSessionBlocked, arg.IsBlocked, arg.ID)
	return err
}
