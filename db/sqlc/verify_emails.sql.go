// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: verify_emails.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :exec
INSERT INTO verify_emails (
  username, email, secret_code, is_used, created_at, expired_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
`

type CreateVerifyEmailParams struct {
	Username   string
	Email      string
	SecretCode string
	IsUsed     bool
	CreatedAt  pgtype.Timestamptz
	ExpiredAt  pgtype.Timestamptz
}

// Create a new verification email
func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) error {
	_, err := q.db.Exec(ctx, createVerifyEmail,
		arg.Username,
		arg.Email,
		arg.SecretCode,
		arg.IsUsed,
		arg.CreatedAt,
		arg.ExpiredAt,
	)
	return err
}

const getVerifyEmailByUsername = `-- name: GetVerifyEmailByUsername :one
SELECT id, username, email, secret_code, is_used, created_at, expired_at FROM verify_emails
WHERE username = $1
LIMIT 1
`

// Get verification email by username
func (q *Queries) GetVerifyEmailByUsername(ctx context.Context, username string) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, getVerifyEmailByUsername, username)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyEmailUsed = `-- name: UpdateVerifyEmailUsed :exec
UPDATE verify_emails
SET is_used = TRUE
WHERE id = $1
`

// Mark verification email as used
func (q *Queries) UpdateVerifyEmailUsed(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateVerifyEmailUsed, id)
	return err
}
