// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package sqlc

import (
	"context"
	"time"
)

const createEntry = `-- name: CreateEntry :exec
INSERT INTO entries (
  account_id, amount, created_at
) VALUES (
  $1, $2, $3
)
`

type CreateEntryParams struct {
	AccountID int64
	Amount    int64
	CreatedAt time.Time
}

// Create a new entry
func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) error {
	_, err := q.db.ExecContext(ctx, createEntry, arg.AccountID, arg.Amount, arg.CreatedAt)
	return err
}

const getEntriesByAccountID = `-- name: GetEntriesByAccountID :many
SELECT id, account_id, amount, created_at FROM entries
WHERE account_id = $1
`

// Get entries by account ID
func (q *Queries) GetEntriesByAccountID(ctx context.Context, accountID int64) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
